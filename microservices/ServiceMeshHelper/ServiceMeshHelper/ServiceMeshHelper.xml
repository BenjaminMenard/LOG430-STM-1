<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ServiceMeshHelper</name>
    </assembly>
    <members>
        <member name="T:ServiceMeshHelper.BusinessObjects.InterServiceRequests.GetRoutingRequest">
            <inheritdoc />
        </member>
        <member name="T:ServiceMeshHelper.BusinessObjects.InterServiceRequests.PostRoutingRequest`1">
            <inheritdoc />
            /// <typeparam name="T">Is a matching type to the expected type by the Rest endpoint</typeparam>
        </member>
        <member name="P:ServiceMeshHelper.BusinessObjects.InterServiceRequests.PostRoutingRequest`1.Payload">
            <summary>
            Post body to send to the service instance
            </summary>
        </member>
        <member name="T:ServiceMeshHelper.BusinessObjects.InterServiceRequests.ServiceRoutingRequest">
            <summary>
            Represents information needed by the nuget to route a request to a service instance
            </summary>
        </member>
        <member name="P:ServiceMeshHelper.BusinessObjects.InterServiceRequests.ServiceRoutingRequest.TargetService">
            <summary>
            The name of the service to route to (e.g. "RouteTimeProvider"), it is the Id set in the docker compose file
            </summary>
        </member>
        <member name="P:ServiceMeshHelper.BusinessObjects.InterServiceRequests.ServiceRoutingRequest.Endpoint">
            <summary>
            The endpoint of the service to route to (e.g. "RouteTimeProvider/RouteTime")
            </summary>
        </member>
        <member name="P:ServiceMeshHelper.BusinessObjects.InterServiceRequests.ServiceRoutingRequest.Params">
            <summary>
            The query parameters to be passed to the service instance
            </summary>
        </member>
        <member name="P:ServiceMeshHelper.BusinessObjects.InterServiceRequests.ServiceRoutingRequest.Mode">
            <summary>
            The load balancing mode to use, defaults to RoundRobin
            </summary>
        </member>
        <member name="T:ServiceMeshHelper.BusinessObjects.NameValue">
            <summary>
             Represents a parameter name and value pair
            </summary>
        </member>
        <member name="P:ServiceMeshHelper.BusinessObjects.NameValue.Name">
            <summary>
            Name of the parameter
            </summary>
        </member>
        <member name="P:ServiceMeshHelper.BusinessObjects.NameValue.Value">
            <summary>
            Value of the parameter
            </summary>
        </member>
        <member name="T:ServiceMeshHelper.BusinessObjects.RoutingData">
            <summary>
            Represents useful information to route a request to a service instance
            </summary>
        </member>
        <member name="P:ServiceMeshHelper.BusinessObjects.RoutingData.Address">
            <summary>
            The complete URL of the service instance
            </summary>
        </member>
        <member name="P:ServiceMeshHelper.BusinessObjects.RoutingData.Host">
            <summary>
            The host name of the service instance
            </summary>
        </member>
        <member name="P:ServiceMeshHelper.BusinessObjects.RoutingData.Port">
            <summary>
            The port of the service instance
            </summary>
        </member>
        <member name="T:ServiceMeshHelper.Controllers.RestController">
            <summary>
            Controller exposing Rest actions for inter-service communication.
            </summary>
        </member>
        <member name="M:ServiceMeshHelper.Controllers.RestController.Get(ServiceMeshHelper.BusinessObjects.InterServiceRequests.GetRoutingRequest)">
            <summary>
            Create a GET request to the target service by it's name (ID in docker-compose).
            Retries 3 times before giving up.
            </summary>
            <param name="routingRequest"></param>
            <returns>RestResponse(s) in an async manner as they become available</returns>
        </member>
        <member name="M:ServiceMeshHelper.Controllers.RestController.Post``1(ServiceMeshHelper.BusinessObjects.InterServiceRequests.PostRoutingRequest{``0})">
            <summary>
            Creates a POST request to the target service by it's name (ID in docker-compose).
            Retries 3 times before giving up.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="routingRequest"></param>
            <returns>RestResponse(s) in an async manner as they become available</returns>
        </member>
        <member name="M:ServiceMeshHelper.Controllers.RestController.GetAddress(System.String,ServiceMeshHelper.LoadBalancingMode)">
            <summary>
            Get the address of a service based on it's name (ID in docker-compose) and the load balancing mode.
            </summary>
            <param name="targetService"></param>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="T:ServiceMeshHelper.Controllers.TcpController">
            <summary>
            Controller exposing actions to manage tcp connections within the service mesh.
            </summary>
        </member>
        <member name="M:ServiceMeshHelper.Controllers.TcpController.GetTcpSocketForRabbitMq(System.String)">
            <summary>
            Allows managed connection over tcp to a service in the mesh using an integrated reverse proxy which is failover capable
            Preflight retried 10 times before giving up with back-off.
            </summary>
            <param name="targetService">Name of the service type to connect to, ex: EventStream</param>
            <returns></returns>
        </member>
        <member name="M:ServiceMeshHelper.Controllers.TcpController.GetTcpSocket(System.String,System.String)">
            <summary>
            Allows managed connection over tcp to a service in the mesh using an integrated reverse proxy which is failover capable
            Preflight retried 10 times before giving up with back-off.
            </summary>
            <param name="protocol">Name of the communication protocol, ex: rabbitmq or redis or jdbc:postgresql</param>
            <param name="targetService">Name of the service type to connect to, ex: EventStream</param>
            <returns></returns>
        </member>
        <member name="T:ServiceMeshHelper.LoadBalancingMode">
            <summary>
            Enum to specify the load balancing mode for a request
            </summary>
        </member>
        <member name="F:ServiceMeshHelper.LoadBalancingMode.RoundRobin">
            <summary>
            Will randomly select a matching service instance
            </summary>
        </member>
        <member name="F:ServiceMeshHelper.LoadBalancingMode.Broadcast">
            <summary>
            Will send the request to all matching service instances
            </summary>
        </member>
        <member name="T:ServiceMeshHelper.Services.ServiceMeshConfiguration">
            <summary>
            Allows to configure the nuget by code instead of environment variables
            </summary>
        </member>
        <member name="M:ServiceMeshHelper.Services.ServiceMeshConfiguration.Configure(ServiceMeshHelper.Services.ServiceMeshOptions)">
            <summary>
             Configures the nuget by code instead of environment variables
            </summary>
            <param name="options"></param>
        </member>
    </members>
</doc>
