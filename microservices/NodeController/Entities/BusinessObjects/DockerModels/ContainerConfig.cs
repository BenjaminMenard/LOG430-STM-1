/*
 * Docker Engine API
 *
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release, so API calls are versioned to ensure that clients don't break. To lock to a specific version of the API, you prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP `400 Bad Request` error message is returned.  If you omit the version-prefix, the current version of the API (v1.42) is used. For example, calling `/info` is the same as calling `/v1.42/info`. Using the API without a version-prefix is deprecated and will be removed in a future release.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer daemons.   # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a [base64url encoded](https://tools.ietf.org/html/rfc4648#section-5) (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ``` 
 *
 * OpenAPI spec version: 1.42
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System.Text;
using System.Runtime.Serialization;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Configuration for a container that is portable between hosts.  When used as &#x60;ContainerRaw&#x60; field in an image, &#x60;ContainerRaw&#x60; is an optional field containing the configuration of the container that was last committed when creating the image.  Previous versions of Docker builder used this field to store build cache, and it is not in active use anymore. 
    /// </summary>
    [DataContract]
    public partial class ContainerConfig : IEquatable<ContainerConfig>
    { 
        /// <summary>
        /// The hostname to use for the container, as a valid RFC 1123 hostname. 
        /// </summary>
        /// <value>The hostname to use for the container, as a valid RFC 1123 hostname. </value>

        [DataMember(Name="Hostname")]
        public string Hostname { get; set; }

        /// <summary>
        /// The domain name to use for the container. 
        /// </summary>
        /// <value>The domain name to use for the container. </value>

        [DataMember(Name="Domainname")]
        public string Domainname { get; set; }

        /// <summary>
        /// The user that commands are run as inside the container.
        /// </summary>
        /// <value>The user that commands are run as inside the container.</value>

        [DataMember(Name="User")]
        public string User { get; set; }

        /// <summary>
        /// Whether to attach to &#x60;stdin&#x60;.
        /// </summary>
        /// <value>Whether to attach to &#x60;stdin&#x60;.</value>

        [DataMember(Name="AttachStdin")]
        public bool? AttachStdin { get; set; }

        /// <summary>
        /// Whether to attach to &#x60;stdout&#x60;.
        /// </summary>
        /// <value>Whether to attach to &#x60;stdout&#x60;.</value>

        [DataMember(Name="AttachStdout")]
        public bool? AttachStdout { get; set; }

        /// <summary>
        /// Whether to attach to &#x60;stderr&#x60;.
        /// </summary>
        /// <value>Whether to attach to &#x60;stderr&#x60;.</value>

        [DataMember(Name="AttachStderr")]
        public bool? AttachStderr { get; set; }

        /// <summary>
        /// An object mapping ports to an empty object in the form:  &#x60;{\&quot;&lt;port&gt;/&lt;tcp|udp|sctp&gt;\&quot;: {}}&#x60; 
        /// </summary>
        /// <value>An object mapping ports to an empty object in the form:  &#x60;{\&quot;&lt;port&gt;/&lt;tcp|udp|sctp&gt;\&quot;: {}}&#x60; </value>

        [DataMember(Name="ExposedPorts")]
        public Dictionary<string, Object> ExposedPorts { get; set; }

        /// <summary>
        /// Attach standard streams to a TTY, including &#x60;stdin&#x60; if it is not closed. 
        /// </summary>
        /// <value>Attach standard streams to a TTY, including &#x60;stdin&#x60; if it is not closed. </value>

        [DataMember(Name="Tty")]
        public bool? Tty { get; set; }

        /// <summary>
        /// Open &#x60;stdin&#x60;
        /// </summary>
        /// <value>Open &#x60;stdin&#x60;</value>

        [DataMember(Name="OpenStdin")]
        public bool? OpenStdin { get; set; }

        /// <summary>
        /// Close &#x60;stdin&#x60; after one attached client disconnects
        /// </summary>
        /// <value>Close &#x60;stdin&#x60; after one attached client disconnects</value>

        [DataMember(Name="StdinOnce")]
        public bool? StdinOnce { get; set; }

        /// <summary>
        /// A list of environment variables to set inside the container in the form &#x60;[\&quot;VAR&#x3D;value\&quot;, ...]&#x60;. A variable without &#x60;&#x3D;&#x60; is removed from the environment, rather than to have an empty value. 
        /// </summary>
        /// <value>A list of environment variables to set inside the container in the form &#x60;[\&quot;VAR&#x3D;value\&quot;, ...]&#x60;. A variable without &#x60;&#x3D;&#x60; is removed from the environment, rather than to have an empty value. </value>

        [DataMember(Name="Env")]
        public List<string> Env { get; set; }

        /// <summary>
        /// Command to run specified as a string or an array of strings. 
        /// </summary>
        /// <value>Command to run specified as a string or an array of strings. </value>

        [DataMember(Name="Cmd")]
        public List<string> Cmd { get; set; }

        /// <summary>
        /// Gets or Sets Healthcheck
        /// </summary>

        [DataMember(Name="Healthcheck")]
        public HealthConfig Healthcheck { get; set; }

        /// <summary>
        /// Command is already escaped (Windows only)
        /// </summary>
        /// <value>Command is already escaped (Windows only)</value>

        [DataMember(Name="ArgsEscaped")]
        public bool? ArgsEscaped { get; set; }

        /// <summary>
        /// The name (or reference) of the image to use when creating the container, or which was used when the container was created. 
        /// </summary>
        /// <value>The name (or reference) of the image to use when creating the container, or which was used when the container was created. </value>

        [DataMember(Name="Image")]
        public string Image { get; set; }

        /// <summary>
        /// An object mapping mount point paths inside the container to empty objects. 
        /// </summary>
        /// <value>An object mapping mount point paths inside the container to empty objects. </value>

        [DataMember(Name="Volumes")]
        public Dictionary<string, Object> Volumes { get; set; }

        /// <summary>
        /// The working directory for commands to run in.
        /// </summary>
        /// <value>The working directory for commands to run in.</value>

        [DataMember(Name="WorkingDir")]
        public string WorkingDir { get; set; }

        /// <summary>
        /// The entry point for the container as a string or an array of strings.  If the array consists of exactly one empty string (&#x60;[\&quot;\&quot;]&#x60;) then the entry point is reset to system default (i.e., the entry point used by docker when there is no &#x60;ENTRYPOINT&#x60; instruction in the &#x60;Dockerfile&#x60;). 
        /// </summary>
        /// <value>The entry point for the container as a string or an array of strings.  If the array consists of exactly one empty string (&#x60;[\&quot;\&quot;]&#x60;) then the entry point is reset to system default (i.e., the entry point used by docker when there is no &#x60;ENTRYPOINT&#x60; instruction in the &#x60;Dockerfile&#x60;). </value>

        [DataMember(Name="Entrypoint")]
        public List<string> Entrypoint { get; set; }

        /// <summary>
        /// Disable networking for the container.
        /// </summary>
        /// <value>Disable networking for the container.</value>

        [DataMember(Name="NetworkDisabled")]
        public bool? NetworkDisabled { get; set; }

        /// <summary>
        /// MAC address of the container.
        /// </summary>
        /// <value>MAC address of the container.</value>

        [DataMember(Name="MacAddress")]
        public string MacAddress { get; set; }

        /// <summary>
        /// &#x60;ONBUILD&#x60; metadata that were defined in the image&#39;s &#x60;Dockerfile&#x60;. 
        /// </summary>
        /// <value>&#x60;ONBUILD&#x60; metadata that were defined in the image&#39;s &#x60;Dockerfile&#x60;. </value>

        [DataMember(Name="OnBuild")]
        public List<string> OnBuild { get; set; }

        /// <summary>
        /// User-defined key/value metadata.
        /// </summary>
        /// <value>User-defined key/value metadata.</value>

        [DataMember(Name="Labels")]
        public Dictionary<string, string> Labels { get; set; }

        /// <summary>
        /// Signal to stop a container as a string or unsigned integer. 
        /// </summary>
        /// <value>Signal to stop a container as a string or unsigned integer. </value>

        [DataMember(Name="StopSignal")]
        public string StopSignal { get; set; }

        /// <summary>
        /// Timeout to stop a container in seconds.
        /// </summary>
        /// <value>Timeout to stop a container in seconds.</value>

        [DataMember(Name="StopTimeout")]
        public int? StopTimeout { get; set; }

        /// <summary>
        /// Shell for when &#x60;RUN&#x60;, &#x60;CMD&#x60;, and &#x60;ENTRYPOINT&#x60; uses a shell. 
        /// </summary>
        /// <value>Shell for when &#x60;RUN&#x60;, &#x60;CMD&#x60;, and &#x60;ENTRYPOINT&#x60; uses a shell. </value>

        [DataMember(Name="Shell")]
        public List<string> Shell { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ContainerRaw {\n");
            sb.Append("  Hostname: ").Append(Hostname).Append("\n");
            sb.Append("  Domainname: ").Append(Domainname).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  AttachStdin: ").Append(AttachStdin).Append("\n");
            sb.Append("  AttachStdout: ").Append(AttachStdout).Append("\n");
            sb.Append("  AttachStderr: ").Append(AttachStderr).Append("\n");
            sb.Append("  ExposedPorts: ").Append(ExposedPorts).Append("\n");
            sb.Append("  Tty: ").Append(Tty).Append("\n");
            sb.Append("  OpenStdin: ").Append(OpenStdin).Append("\n");
            sb.Append("  StdinOnce: ").Append(StdinOnce).Append("\n");
            sb.Append("  Env: ").Append(Env).Append("\n");
            sb.Append("  Cmd: ").Append(Cmd).Append("\n");
            sb.Append("  Healthcheck: ").Append(Healthcheck).Append("\n");
            sb.Append("  ArgsEscaped: ").Append(ArgsEscaped).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  Volumes: ").Append(Volumes).Append("\n");
            sb.Append("  WorkingDir: ").Append(WorkingDir).Append("\n");
            sb.Append("  Entrypoint: ").Append(Entrypoint).Append("\n");
            sb.Append("  NetworkDisabled: ").Append(NetworkDisabled).Append("\n");
            sb.Append("  MacAddress: ").Append(MacAddress).Append("\n");
            sb.Append("  OnBuild: ").Append(OnBuild).Append("\n");
            sb.Append("  Labels: ").Append(Labels).Append("\n");
            sb.Append("  StopSignal: ").Append(StopSignal).Append("\n");
            sb.Append("  StopTimeout: ").Append(StopTimeout).Append("\n");
            sb.Append("  Shell: ").Append(Shell).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ContainerConfig)obj);
        }

        /// <summary>
        /// Returns true if ContainerRaw instances are equal
        /// </summary>
        /// <param name="other">Instance of ContainerRaw to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContainerConfig other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Hostname == other.Hostname ||
                    Hostname != null &&
                    Hostname.Equals(other.Hostname)
                ) && 
                (
                    Domainname == other.Domainname ||
                    Domainname != null &&
                    Domainname.Equals(other.Domainname)
                ) && 
                (
                    User == other.User ||
                    User != null &&
                    User.Equals(other.User)
                ) && 
                (
                    AttachStdin == other.AttachStdin ||
                    AttachStdin != null &&
                    AttachStdin.Equals(other.AttachStdin)
                ) && 
                (
                    AttachStdout == other.AttachStdout ||
                    AttachStdout != null &&
                    AttachStdout.Equals(other.AttachStdout)
                ) && 
                (
                    AttachStderr == other.AttachStderr ||
                    AttachStderr != null &&
                    AttachStderr.Equals(other.AttachStderr)
                ) && 
                (
                    ExposedPorts == other.ExposedPorts ||
                    ExposedPorts != null &&
                    ExposedPorts.SequenceEqual(other.ExposedPorts)
                ) && 
                (
                    Tty == other.Tty ||
                    Tty != null &&
                    Tty.Equals(other.Tty)
                ) && 
                (
                    OpenStdin == other.OpenStdin ||
                    OpenStdin != null &&
                    OpenStdin.Equals(other.OpenStdin)
                ) && 
                (
                    StdinOnce == other.StdinOnce ||
                    StdinOnce != null &&
                    StdinOnce.Equals(other.StdinOnce)
                ) && 
                (
                    Env == other.Env ||
                    Env != null &&
                    Env.SequenceEqual(other.Env)
                ) && 
                (
                    Cmd == other.Cmd ||
                    Cmd != null &&
                    Cmd.SequenceEqual(other.Cmd)
                ) && 
                (
                    Healthcheck == other.Healthcheck ||
                    Healthcheck != null &&
                    Healthcheck.Equals(other.Healthcheck)
                ) && 
                (
                    ArgsEscaped == other.ArgsEscaped ||
                    ArgsEscaped != null &&
                    ArgsEscaped.Equals(other.ArgsEscaped)
                ) && 
                (
                    Image == other.Image ||
                    Image != null &&
                    Image.Equals(other.Image)
                ) && 
                (
                    Volumes == other.Volumes ||
                    Volumes != null &&
                    Volumes.SequenceEqual(other.Volumes)
                ) && 
                (
                    WorkingDir == other.WorkingDir ||
                    WorkingDir != null &&
                    WorkingDir.Equals(other.WorkingDir)
                ) && 
                (
                    Entrypoint == other.Entrypoint ||
                    Entrypoint != null &&
                    Entrypoint.SequenceEqual(other.Entrypoint)
                ) && 
                (
                    NetworkDisabled == other.NetworkDisabled ||
                    NetworkDisabled != null &&
                    NetworkDisabled.Equals(other.NetworkDisabled)
                ) && 
                (
                    MacAddress == other.MacAddress ||
                    MacAddress != null &&
                    MacAddress.Equals(other.MacAddress)
                ) && 
                (
                    OnBuild == other.OnBuild ||
                    OnBuild != null &&
                    OnBuild.SequenceEqual(other.OnBuild)
                ) && 
                (
                    Labels == other.Labels ||
                    Labels != null &&
                    Labels.SequenceEqual(other.Labels)
                ) && 
                (
                    StopSignal == other.StopSignal ||
                    StopSignal != null &&
                    StopSignal.Equals(other.StopSignal)
                ) && 
                (
                    StopTimeout == other.StopTimeout ||
                    StopTimeout != null &&
                    StopTimeout.Equals(other.StopTimeout)
                ) && 
                (
                    Shell == other.Shell ||
                    Shell != null &&
                    Shell.SequenceEqual(other.Shell)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Hostname != null)
                    hashCode = hashCode * 59 + Hostname.GetHashCode();
                    if (Domainname != null)
                    hashCode = hashCode * 59 + Domainname.GetHashCode();
                    if (User != null)
                    hashCode = hashCode * 59 + User.GetHashCode();
                    if (AttachStdin != null)
                    hashCode = hashCode * 59 + AttachStdin.GetHashCode();
                    if (AttachStdout != null)
                    hashCode = hashCode * 59 + AttachStdout.GetHashCode();
                    if (AttachStderr != null)
                    hashCode = hashCode * 59 + AttachStderr.GetHashCode();
                    if (ExposedPorts != null)
                    hashCode = hashCode * 59 + ExposedPorts.GetHashCode();
                    if (Tty != null)
                    hashCode = hashCode * 59 + Tty.GetHashCode();
                    if (OpenStdin != null)
                    hashCode = hashCode * 59 + OpenStdin.GetHashCode();
                    if (StdinOnce != null)
                    hashCode = hashCode * 59 + StdinOnce.GetHashCode();
                    if (Env != null)
                    hashCode = hashCode * 59 + Env.GetHashCode();
                    if (Cmd != null)
                    hashCode = hashCode * 59 + Cmd.GetHashCode();
                    if (Healthcheck != null)
                    hashCode = hashCode * 59 + Healthcheck.GetHashCode();
                    if (ArgsEscaped != null)
                    hashCode = hashCode * 59 + ArgsEscaped.GetHashCode();
                    if (Image != null)
                    hashCode = hashCode * 59 + Image.GetHashCode();
                    if (Volumes != null)
                    hashCode = hashCode * 59 + Volumes.GetHashCode();
                    if (WorkingDir != null)
                    hashCode = hashCode * 59 + WorkingDir.GetHashCode();
                    if (Entrypoint != null)
                    hashCode = hashCode * 59 + Entrypoint.GetHashCode();
                    if (NetworkDisabled != null)
                    hashCode = hashCode * 59 + NetworkDisabled.GetHashCode();
                    if (MacAddress != null)
                    hashCode = hashCode * 59 + MacAddress.GetHashCode();
                    if (OnBuild != null)
                    hashCode = hashCode * 59 + OnBuild.GetHashCode();
                    if (Labels != null)
                    hashCode = hashCode * 59 + Labels.GetHashCode();
                    if (StopSignal != null)
                    hashCode = hashCode * 59 + StopSignal.GetHashCode();
                    if (StopTimeout != null)
                    hashCode = hashCode * 59 + StopTimeout.GetHashCode();
                    if (Shell != null)
                    hashCode = hashCode * 59 + Shell.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ContainerConfig left, ContainerConfig right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ContainerConfig left, ContainerConfig right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
