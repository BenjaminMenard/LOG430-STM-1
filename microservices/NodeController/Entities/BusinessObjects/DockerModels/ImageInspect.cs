/*
 * Docker Engine API
 *
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release, so API calls are versioned to ensure that clients don't break. To lock to a specific version of the API, you prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP `400 Bad Request` error message is returned.  If you omit the version-prefix, the current version of the API (v1.42) is used. For example, calling `/info` is the same as calling `/v1.42/info`. Using the API without a version-prefix is deprecated and will be removed in a future release.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer daemons.   # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a [base64url encoded](https://tools.ietf.org/html/rfc4648#section-5) (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ``` 
 *
 * OpenAPI spec version: 1.42
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System.Text;
using System.Runtime.Serialization;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Information about an image in the local image cache. 
    /// </summary>
    [DataContract]
    public partial class ImageInspect : IEquatable<ImageInspect>
    { 
        /// <summary>
        /// ID is the content-addressable ID of an image.  This identifier is a content-addressable digest calculated from the image&#39;s configuration (which includes the digests of layers used by the image).  Note that this digest differs from the &#x60;RepoDigests&#x60; below, which holds digests of image manifests that reference the image. 
        /// </summary>
        /// <value>ID is the content-addressable ID of an image.  This identifier is a content-addressable digest calculated from the image&#39;s configuration (which includes the digests of layers used by the image).  Note that this digest differs from the &#x60;RepoDigests&#x60; below, which holds digests of image manifests that reference the image. </value>

        [DataMember(Name="Id")]
        public string Id { get; set; }

        /// <summary>
        /// List of image names/tags in the local image cache that reference this image.  Multiple image tags can refer to the same image, and this list may be empty if no tags reference the image, in which case the image is \&quot;untagged\&quot;, in which case it can still be referenced by its ID. 
        /// </summary>
        /// <value>List of image names/tags in the local image cache that reference this image.  Multiple image tags can refer to the same image, and this list may be empty if no tags reference the image, in which case the image is \&quot;untagged\&quot;, in which case it can still be referenced by its ID. </value>

        [DataMember(Name="RepoTags")]
        public List<string> RepoTags { get; set; }

        /// <summary>
        /// List of content-addressable digests of locally available image manifests that the image is referenced from. Multiple manifests can refer to the same image.  These digests are usually only available if the image was either pulled from a registry, or if the image was pushed to a registry, which is when the manifest is generated and its digest calculated. 
        /// </summary>
        /// <value>List of content-addressable digests of locally available image manifests that the image is referenced from. Multiple manifests can refer to the same image.  These digests are usually only available if the image was either pulled from a registry, or if the image was pushed to a registry, which is when the manifest is generated and its digest calculated. </value>

        [DataMember(Name="RepoDigests")]
        public List<string> RepoDigests { get; set; }

        /// <summary>
        /// ID of the parent image.  Depending on how the image was created, this field may be empty and is only set for images that were built/created locally. This field is empty if the image was pulled from an image registry. 
        /// </summary>
        /// <value>ID of the parent image.  Depending on how the image was created, this field may be empty and is only set for images that were built/created locally. This field is empty if the image was pulled from an image registry. </value>

        [DataMember(Name="Parent")]
        public string Parent { get; set; }

        /// <summary>
        /// Optional message that was set when committing or importing the image. 
        /// </summary>
        /// <value>Optional message that was set when committing or importing the image. </value>

        [DataMember(Name="Comment")]
        public string Comment { get; set; }

        /// <summary>
        /// Date and time at which the image was created, formatted in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds. 
        /// </summary>
        /// <value>Date and time at which the image was created, formatted in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds. </value>

        [DataMember(Name="Created")]
        public string Created { get; set; }

        /// <summary>
        /// The ID of the container that was used to create the image.  Depending on how the image was created, this field may be empty. 
        /// </summary>
        /// <value>The ID of the container that was used to create the image.  Depending on how the image was created, this field may be empty. </value>

        [DataMember(Name="Container")]
        public string Container { get; set; }

        /// <summary>
        /// Gets or Sets ContainerRaw
        /// </summary>

        [DataMember(Name="ContainerRaw")]
        public ContainerConfig ContainerConfig { get; set; }

        /// <summary>
        /// The version of Docker that was used to build the image.  Depending on how the image was created, this field may be empty. 
        /// </summary>
        /// <value>The version of Docker that was used to build the image.  Depending on how the image was created, this field may be empty. </value>

        [DataMember(Name="DockerVersion")]
        public string DockerVersion { get; set; }

        /// <summary>
        /// Name of the author that was specified when committing the image, or as specified through MAINTAINER (deprecated) in the Dockerfile. 
        /// </summary>
        /// <value>Name of the author that was specified when committing the image, or as specified through MAINTAINER (deprecated) in the Dockerfile. </value>

        [DataMember(Name="Author")]
        public string Author { get; set; }

        /// <summary>
        /// Gets or Sets Config
        /// </summary>

        [DataMember(Name="Config")]
        public ContainerConfig Config { get; set; }

        /// <summary>
        /// Hardware CPU architecture that the image runs on. 
        /// </summary>
        /// <value>Hardware CPU architecture that the image runs on. </value>

        [DataMember(Name="Architecture")]
        public string Architecture { get; set; }

        /// <summary>
        /// CPU architecture variant (presently ARM-only). 
        /// </summary>
        /// <value>CPU architecture variant (presently ARM-only). </value>

        [DataMember(Name="Variant")]
        public string Variant { get; set; }

        /// <summary>
        /// Operating System the image is built to run on. 
        /// </summary>
        /// <value>Operating System the image is built to run on. </value>

        [DataMember(Name="Os")]
        public string Os { get; set; }

        /// <summary>
        /// Operating System version the image is built to run on (especially for Windows). 
        /// </summary>
        /// <value>Operating System version the image is built to run on (especially for Windows). </value>

        [DataMember(Name="OsVersion")]
        public string OsVersion { get; set; }

        /// <summary>
        /// Total size of the image including all layers it is composed of. 
        /// </summary>
        /// <value>Total size of the image including all layers it is composed of. </value>

        [DataMember(Name="Size")]
        public long? Size { get; set; }

        /// <summary>
        /// Total size of the image including all layers it is composed of.  In versions of Docker before v1.10, this field was calculated from the image itself and all of its parent images. Docker v1.10 and up store images self-contained, and no longer use a parent-chain, making this field an equivalent of the Size field.  This field is kept for backward compatibility, but may be removed in a future version of the API. 
        /// </summary>
        /// <value>Total size of the image including all layers it is composed of.  In versions of Docker before v1.10, this field was calculated from the image itself and all of its parent images. Docker v1.10 and up store images self-contained, and no longer use a parent-chain, making this field an equivalent of the Size field.  This field is kept for backward compatibility, but may be removed in a future version of the API. </value>

        [DataMember(Name="VirtualSize")]
        public long? VirtualSize { get; set; }

        /// <summary>
        /// Gets or Sets GraphDriver
        /// </summary>

        [DataMember(Name="GraphDriver")]
        public GraphDriverData GraphDriver { get; set; }

        /// <summary>
        /// Gets or Sets RootFS
        /// </summary>

        [DataMember(Name="RootFS")]
        public ImageInspectRootFS RootFS { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>

        [DataMember(Name="Metadata")]
        public ImageInspectMetadata Metadata { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ImageInspect {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  RepoTags: ").Append(RepoTags).Append("\n");
            sb.Append("  RepoDigests: ").Append(RepoDigests).Append("\n");
            sb.Append("  Parent: ").Append(Parent).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Container: ").Append(Container).Append("\n");
            sb.Append("  ContainerRaw: ").Append(ContainerConfig).Append("\n");
            sb.Append("  DockerVersion: ").Append(DockerVersion).Append("\n");
            sb.Append("  Author: ").Append(Author).Append("\n");
            sb.Append("  Config: ").Append(Config).Append("\n");
            sb.Append("  Architecture: ").Append(Architecture).Append("\n");
            sb.Append("  Variant: ").Append(Variant).Append("\n");
            sb.Append("  Os: ").Append(Os).Append("\n");
            sb.Append("  OsVersion: ").Append(OsVersion).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  VirtualSize: ").Append(VirtualSize).Append("\n");
            sb.Append("  GraphDriver: ").Append(GraphDriver).Append("\n");
            sb.Append("  RootFS: ").Append(RootFS).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ImageInspect)obj);
        }

        /// <summary>
        /// Returns true if ImageInspect instances are equal
        /// </summary>
        /// <param name="other">Instance of ImageInspect to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ImageInspect other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    RepoTags == other.RepoTags ||
                    RepoTags != null &&
                    RepoTags.SequenceEqual(other.RepoTags)
                ) && 
                (
                    RepoDigests == other.RepoDigests ||
                    RepoDigests != null &&
                    RepoDigests.SequenceEqual(other.RepoDigests)
                ) && 
                (
                    Parent == other.Parent ||
                    Parent != null &&
                    Parent.Equals(other.Parent)
                ) && 
                (
                    Comment == other.Comment ||
                    Comment != null &&
                    Comment.Equals(other.Comment)
                ) && 
                (
                    Created == other.Created ||
                    Created != null &&
                    Created.Equals(other.Created)
                ) && 
                (
                    Container == other.Container ||
                    Container != null &&
                    Container.Equals(other.Container)
                ) && 
                (
                    ContainerConfig == other.ContainerConfig ||
                    ContainerConfig != null &&
                    ContainerConfig.Equals(other.ContainerConfig)
                ) && 
                (
                    DockerVersion == other.DockerVersion ||
                    DockerVersion != null &&
                    DockerVersion.Equals(other.DockerVersion)
                ) && 
                (
                    Author == other.Author ||
                    Author != null &&
                    Author.Equals(other.Author)
                ) && 
                (
                    Config == other.Config ||
                    Config != null &&
                    Config.Equals(other.Config)
                ) && 
                (
                    Architecture == other.Architecture ||
                    Architecture != null &&
                    Architecture.Equals(other.Architecture)
                ) && 
                (
                    Variant == other.Variant ||
                    Variant != null &&
                    Variant.Equals(other.Variant)
                ) && 
                (
                    Os == other.Os ||
                    Os != null &&
                    Os.Equals(other.Os)
                ) && 
                (
                    OsVersion == other.OsVersion ||
                    OsVersion != null &&
                    OsVersion.Equals(other.OsVersion)
                ) && 
                (
                    Size == other.Size ||
                    Size != null &&
                    Size.Equals(other.Size)
                ) && 
                (
                    VirtualSize == other.VirtualSize ||
                    VirtualSize != null &&
                    VirtualSize.Equals(other.VirtualSize)
                ) && 
                (
                    GraphDriver == other.GraphDriver ||
                    GraphDriver != null &&
                    GraphDriver.Equals(other.GraphDriver)
                ) && 
                (
                    RootFS == other.RootFS ||
                    RootFS != null &&
                    RootFS.Equals(other.RootFS)
                ) && 
                (
                    Metadata == other.Metadata ||
                    Metadata != null &&
                    Metadata.Equals(other.Metadata)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (RepoTags != null)
                    hashCode = hashCode * 59 + RepoTags.GetHashCode();
                    if (RepoDigests != null)
                    hashCode = hashCode * 59 + RepoDigests.GetHashCode();
                    if (Parent != null)
                    hashCode = hashCode * 59 + Parent.GetHashCode();
                    if (Comment != null)
                    hashCode = hashCode * 59 + Comment.GetHashCode();
                    if (Created != null)
                    hashCode = hashCode * 59 + Created.GetHashCode();
                    if (Container != null)
                    hashCode = hashCode * 59 + Container.GetHashCode();
                    if (ContainerConfig != null)
                    hashCode = hashCode * 59 + ContainerConfig.GetHashCode();
                    if (DockerVersion != null)
                    hashCode = hashCode * 59 + DockerVersion.GetHashCode();
                    if (Author != null)
                    hashCode = hashCode * 59 + Author.GetHashCode();
                    if (Config != null)
                    hashCode = hashCode * 59 + Config.GetHashCode();
                    if (Architecture != null)
                    hashCode = hashCode * 59 + Architecture.GetHashCode();
                    if (Variant != null)
                    hashCode = hashCode * 59 + Variant.GetHashCode();
                    if (Os != null)
                    hashCode = hashCode * 59 + Os.GetHashCode();
                    if (OsVersion != null)
                    hashCode = hashCode * 59 + OsVersion.GetHashCode();
                    if (Size != null)
                    hashCode = hashCode * 59 + Size.GetHashCode();
                    if (VirtualSize != null)
                    hashCode = hashCode * 59 + VirtualSize.GetHashCode();
                    if (GraphDriver != null)
                    hashCode = hashCode * 59 + GraphDriver.GetHashCode();
                    if (RootFS != null)
                    hashCode = hashCode * 59 + RootFS.GetHashCode();
                    if (Metadata != null)
                    hashCode = hashCode * 59 + Metadata.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ImageInspect left, ImageInspect right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ImageInspect left, ImageInspect right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
