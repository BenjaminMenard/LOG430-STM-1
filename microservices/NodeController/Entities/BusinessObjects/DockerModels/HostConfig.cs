/*
 * Docker Engine API
 *
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release, so API calls are versioned to ensure that clients don't break. To lock to a specific version of the API, you prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP `400 Bad Request` error message is returned.  If you omit the version-prefix, the current version of the API (v1.42) is used. For example, calling `/info` is the same as calling `/v1.42/info`. Using the API without a version-prefix is deprecated and will be removed in a future release.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer daemons.   # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a [base64url encoded](https://tools.ietf.org/html/rfc4648#section-5) (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ``` 
 *
 * OpenAPI spec version: 1.42
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System.Text;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Container configuration that depends on the host we are running on
    /// </summary>
    [DataContract]
    public partial class HostConfig : Resources, IEquatable<HostConfig>
    { 
        /// <summary>
        /// A list of volume bindings for this container. Each volume binding is a string in one of these forms:  - &#x60;host-src:container-dest[:options]&#x60; to bind-mount a host path   into the container. Both &#x60;host-src&#x60;, and &#x60;container-dest&#x60; must   be an _absolute_ path. - &#x60;volume-name:container-dest[:options]&#x60; to bind-mount a volume   managed by a volume driver into the container. &#x60;container-dest&#x60;   must be an _absolute_ path.  &#x60;options&#x60; is an optional, comma-delimited list of:  - &#x60;nocopy&#x60; disables automatic copying of data from the container   path to the volume. The &#x60;nocopy&#x60; flag only applies to named volumes. - &#x60;[ro|rw]&#x60; mounts a volume read-only or read-write, respectively.   If omitted or set to &#x60;rw&#x60;, volumes are mounted read-write. - &#x60;[z|Z]&#x60; applies SELinux labels to allow or deny multiple containers   to read and write to the same volume.     - &#x60;z&#x60;: a _shared_ content label is applied to the content. This       label indicates that multiple containers can share the volume       content, for both reading and writing.     - &#x60;Z&#x60;: a _private unshared_ label is applied to the content.       This label indicates that only the current container can use       a private volume. Labeling systems such as SELinux require       proper labels to be placed on volume content that is mounted       into a container. Without a label, the security system can       prevent a container&#39;s processes from using the content. By       default, the labels set by the host operating system are not       modified. - &#x60;[[r]shared|[r]slave|[r]private]&#x60; specifies mount   [propagation behavior](https://www.kernel.org/doc/Documentation/filesystems/sharedsubtree.txt).   This only applies to bind-mounted volumes, not internal volumes   or named volumes. Mount propagation requires the source mount   point (the location where the source directory is mounted in the   host operating system) to have the correct propagation properties.   For shared volumes, the source mount point must be set to &#x60;shared&#x60;.   For slave volumes, the mount must be set to either &#x60;shared&#x60; or   &#x60;slave&#x60;. 
        /// </summary>
        /// <value>A list of volume bindings for this container. Each volume binding is a string in one of these forms:  - &#x60;host-src:container-dest[:options]&#x60; to bind-mount a host path   into the container. Both &#x60;host-src&#x60;, and &#x60;container-dest&#x60; must   be an _absolute_ path. - &#x60;volume-name:container-dest[:options]&#x60; to bind-mount a volume   managed by a volume driver into the container. &#x60;container-dest&#x60;   must be an _absolute_ path.  &#x60;options&#x60; is an optional, comma-delimited list of:  - &#x60;nocopy&#x60; disables automatic copying of data from the container   path to the volume. The &#x60;nocopy&#x60; flag only applies to named volumes. - &#x60;[ro|rw]&#x60; mounts a volume read-only or read-write, respectively.   If omitted or set to &#x60;rw&#x60;, volumes are mounted read-write. - &#x60;[z|Z]&#x60; applies SELinux labels to allow or deny multiple containers   to read and write to the same volume.     - &#x60;z&#x60;: a _shared_ content label is applied to the content. This       label indicates that multiple containers can share the volume       content, for both reading and writing.     - &#x60;Z&#x60;: a _private unshared_ label is applied to the content.       This label indicates that only the current container can use       a private volume. Labeling systems such as SELinux require       proper labels to be placed on volume content that is mounted       into a container. Without a label, the security system can       prevent a container&#39;s processes from using the content. By       default, the labels set by the host operating system are not       modified. - &#x60;[[r]shared|[r]slave|[r]private]&#x60; specifies mount   [propagation behavior](https://www.kernel.org/doc/Documentation/filesystems/sharedsubtree.txt).   This only applies to bind-mounted volumes, not internal volumes   or named volumes. Mount propagation requires the source mount   point (the location where the source directory is mounted in the   host operating system) to have the correct propagation properties.   For shared volumes, the source mount point must be set to &#x60;shared&#x60;.   For slave volumes, the mount must be set to either &#x60;shared&#x60; or   &#x60;slave&#x60;. </value>

        [DataMember(Name="Binds")]
        public List<string> Binds { get; set; }

        /// <summary>
        /// Path to a file where the container ID is written
        /// </summary>
        /// <value>Path to a file where the container ID is written</value>

        [DataMember(Name="ContainerIDFile")]
        public string ContainerIDFile { get; set; }

        /// <summary>
        /// Gets or Sets LogConfig
        /// </summary>

        [DataMember(Name="LogConfig")]
        public HostConfigLogConfig LogConfig { get; set; }

        /// <summary>
        /// Network mode to use for this container. Supported standard values are: &#x60;bridge&#x60;, &#x60;host&#x60;, &#x60;none&#x60;, and &#x60;container:&lt;name|id&gt;&#x60;. Any other value is taken as a custom network&#39;s name to which this container should connect to. 
        /// </summary>
        /// <value>Network mode to use for this container. Supported standard values are: &#x60;bridge&#x60;, &#x60;host&#x60;, &#x60;none&#x60;, and &#x60;container:&lt;name|id&gt;&#x60;. Any other value is taken as a custom network&#39;s name to which this container should connect to. </value>

        [DataMember(Name="NetworkMode")]
        public string NetworkMode { get; set; }

        /// <summary>
        /// Gets or Sets PortBindings
        /// </summary>

        [DataMember(Name="PortBindings")]
        public PortMap PortBindings { get; set; }

        /// <summary>
        /// Gets or Sets RestartPolicy
        /// </summary>

        [DataMember(Name="RestartPolicy")]
        public RestartPolicy RestartPolicy { get; set; }

        /// <summary>
        /// Automatically remove the container when the container&#39;s process exits. This has no effect if &#x60;RestartPolicy&#x60; is set. 
        /// </summary>
        /// <value>Automatically remove the container when the container&#39;s process exits. This has no effect if &#x60;RestartPolicy&#x60; is set. </value>

        [DataMember(Name="AutoRemove")]
        public bool? AutoRemove { get; set; }

        /// <summary>
        /// Driver that this container uses to mount volumes.
        /// </summary>
        /// <value>Driver that this container uses to mount volumes.</value>

        [DataMember(Name="VolumeDriver")]
        public string VolumeDriver { get; set; }

        /// <summary>
        /// A list of volumes to inherit from another container, specified in the form &#x60;&lt;container name&gt;[:&lt;ro|rw&gt;]&#x60;. 
        /// </summary>
        /// <value>A list of volumes to inherit from another container, specified in the form &#x60;&lt;container name&gt;[:&lt;ro|rw&gt;]&#x60;. </value>

        [DataMember(Name="VolumesFrom")]
        public List<string> VolumesFrom { get; set; }

        /// <summary>
        /// Specification for mounts to be added to the container. 
        /// </summary>
        /// <value>Specification for mounts to be added to the container. </value>

        [DataMember(Name="Mounts")]
        public List<Mount> Mounts { get; set; }

        /// <summary>
        /// Initial console size, as an &#x60;[height, width]&#x60; array. 
        /// </summary>
        /// <value>Initial console size, as an &#x60;[height, width]&#x60; array. </value>

        [DataMember(Name="ConsoleSize")]
        public List<int?> ConsoleSize { get; set; }

        /// <summary>
        /// A list of kernel capabilities to add to the container. Conflicts with option &#39;Capabilities&#39;. 
        /// </summary>
        /// <value>A list of kernel capabilities to add to the container. Conflicts with option &#39;Capabilities&#39;. </value>

        [DataMember(Name="CapAdd")]
        public List<string> CapAdd { get; set; }

        /// <summary>
        /// A list of kernel capabilities to drop from the container. Conflicts with option &#39;Capabilities&#39;. 
        /// </summary>
        /// <value>A list of kernel capabilities to drop from the container. Conflicts with option &#39;Capabilities&#39;. </value>

        [DataMember(Name="CapDrop")]
        public List<string> CapDrop { get; set; }

        /// <summary>
        /// cgroup namespace mode for the container. Possible values are:  - `\"private\"`: the container runs in its own private cgroup namespace - `\"host\"`: use the host system's cgroup namespace  If not specified, the daemon default is used, which can either be `\"private\"` or `\"host\"`, depending on daemon version, kernel support and configuration. 
        /// </summary>
        /// <value>cgroup namespace mode for the container. Possible values are:  - `\"private\"`: the container runs in its own private cgroup namespace - `\"host\"`: use the host system's cgroup namespace  If not specified, the daemon default is used, which can either be `\"private\"` or `\"host\"`, depending on daemon version, kernel support and configuration. </value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum CgroupnsModeEnum
        {
            
            /// <summary>
            /// Enum PrivateEnum for private
            /// </summary>
            [EnumMember(Value = "private")]
            PrivateEnum = 1,
            
            /// <summary>
            /// Enum HostEnum for host
            /// </summary>
            [EnumMember(Value = "host")]
            HostEnum = 2
        }

        /// <summary>
        /// cgroup namespace mode for the container. Possible values are:  - &#x60;\&quot;private\&quot;&#x60;: the container runs in its own private cgroup namespace - &#x60;\&quot;host\&quot;&#x60;: use the host system&#39;s cgroup namespace  If not specified, the daemon default is used, which can either be &#x60;\&quot;private\&quot;&#x60; or &#x60;\&quot;host\&quot;&#x60;, depending on daemon version, kernel support and configuration. 
        /// </summary>
        /// <value>cgroup namespace mode for the container. Possible values are:  - &#x60;\&quot;private\&quot;&#x60;: the container runs in its own private cgroup namespace - &#x60;\&quot;host\&quot;&#x60;: use the host system&#39;s cgroup namespace  If not specified, the daemon default is used, which can either be &#x60;\&quot;private\&quot;&#x60; or &#x60;\&quot;host\&quot;&#x60;, depending on daemon version, kernel support and configuration. </value>

        [DataMember(Name="CgroupnsMode")]
        public CgroupnsModeEnum? CgroupnsMode { get; set; }

        /// <summary>
        /// A list of DNS servers for the container to use.
        /// </summary>
        /// <value>A list of DNS servers for the container to use.</value>

        [DataMember(Name="Dns")]
        public List<string> Dns { get; set; }

        /// <summary>
        /// A list of DNS options.
        /// </summary>
        /// <value>A list of DNS options.</value>

        [DataMember(Name="DnsOptions")]
        public List<string> DnsOptions { get; set; }

        /// <summary>
        /// A list of DNS search domains.
        /// </summary>
        /// <value>A list of DNS search domains.</value>

        [DataMember(Name="DnsSearch")]
        public List<string> DnsSearch { get; set; }

        /// <summary>
        /// A list of hostnames/IP mappings to add to the container&#39;s &#x60;/etc/hosts&#x60; file. Specified in the form &#x60;[\&quot;hostname:IP\&quot;]&#x60;. 
        /// </summary>
        /// <value>A list of hostnames/IP mappings to add to the container&#39;s &#x60;/etc/hosts&#x60; file. Specified in the form &#x60;[\&quot;hostname:IP\&quot;]&#x60;. </value>

        [DataMember(Name="ExtraHosts")]
        public List<string> ExtraHosts { get; set; }

        /// <summary>
        /// A list of additional groups that the container process will run as. 
        /// </summary>
        /// <value>A list of additional groups that the container process will run as. </value>

        [DataMember(Name="GroupAdd")]
        public List<string> GroupAdd { get; set; }

        /// <summary>
        /// IPC sharing mode for the container. Possible values are:  - &#x60;\&quot;none\&quot;&#x60;: own private IPC namespace, with /dev/shm not mounted - &#x60;\&quot;private\&quot;&#x60;: own private IPC namespace - &#x60;\&quot;shareable\&quot;&#x60;: own private IPC namespace, with a possibility to share it with other containers - &#x60;\&quot;container:&lt;name|id&gt;\&quot;&#x60;: join another (shareable) container&#39;s IPC namespace - &#x60;\&quot;host\&quot;&#x60;: use the host system&#39;s IPC namespace  If not specified, daemon default is used, which can either be &#x60;\&quot;private\&quot;&#x60; or &#x60;\&quot;shareable\&quot;&#x60;, depending on daemon version and configuration. 
        /// </summary>
        /// <value>IPC sharing mode for the container. Possible values are:  - &#x60;\&quot;none\&quot;&#x60;: own private IPC namespace, with /dev/shm not mounted - &#x60;\&quot;private\&quot;&#x60;: own private IPC namespace - &#x60;\&quot;shareable\&quot;&#x60;: own private IPC namespace, with a possibility to share it with other containers - &#x60;\&quot;container:&lt;name|id&gt;\&quot;&#x60;: join another (shareable) container&#39;s IPC namespace - &#x60;\&quot;host\&quot;&#x60;: use the host system&#39;s IPC namespace  If not specified, daemon default is used, which can either be &#x60;\&quot;private\&quot;&#x60; or &#x60;\&quot;shareable\&quot;&#x60;, depending on daemon version and configuration. </value>

        [DataMember(Name="IpcMode")]
        public string IpcMode { get; set; }

        /// <summary>
        /// Cgroup to use for the container.
        /// </summary>
        /// <value>Cgroup to use for the container.</value>

        [DataMember(Name="Cgroup")]
        public string Cgroup { get; set; }

        /// <summary>
        /// A list of links for the container in the form &#x60;container_name:alias&#x60;. 
        /// </summary>
        /// <value>A list of links for the container in the form &#x60;container_name:alias&#x60;. </value>

        [DataMember(Name="Links")]
        public List<string> Links { get; set; }

        /// <summary>
        /// An integer value containing the score given to the container in order to tune OOM killer preferences. 
        /// </summary>
        /// <value>An integer value containing the score given to the container in order to tune OOM killer preferences. </value>

        [DataMember(Name="OomScoreAdj")]
        public int? OomScoreAdj { get; set; }

        /// <summary>
        /// Set the PID (Process) Namespace mode for the container. It can be either:  - &#x60;\&quot;container:&lt;name|id&gt;\&quot;&#x60;: joins another container&#39;s PID namespace - &#x60;\&quot;host\&quot;&#x60;: use the host&#39;s PID namespace inside the container 
        /// </summary>
        /// <value>Set the PID (Process) Namespace mode for the container. It can be either:  - &#x60;\&quot;container:&lt;name|id&gt;\&quot;&#x60;: joins another container&#39;s PID namespace - &#x60;\&quot;host\&quot;&#x60;: use the host&#39;s PID namespace inside the container </value>

        [DataMember(Name="PidMode")]
        public string PidMode { get; set; }

        /// <summary>
        /// Gives the container full access to the host.
        /// </summary>
        /// <value>Gives the container full access to the host.</value>

        [DataMember(Name="Privileged")]
        public bool? Privileged { get; set; }

        /// <summary>
        /// Allocates an ephemeral host port for all of a container&#39;s exposed ports.  Ports are de-allocated when the container stops and allocated when the container starts. The allocated port might be changed when restarting the container.  The port is selected from the ephemeral port range that depends on the kernel. For example, on Linux the range is defined by &#x60;/proc/sys/net/ipv4/ip_local_port_range&#x60;. 
        /// </summary>
        /// <value>Allocates an ephemeral host port for all of a container&#39;s exposed ports.  Ports are de-allocated when the container stops and allocated when the container starts. The allocated port might be changed when restarting the container.  The port is selected from the ephemeral port range that depends on the kernel. For example, on Linux the range is defined by &#x60;/proc/sys/net/ipv4/ip_local_port_range&#x60;. </value>

        [DataMember(Name="PublishAllPorts")]
        public bool? PublishAllPorts { get; set; }

        /// <summary>
        /// Mount the container&#39;s root filesystem as read only.
        /// </summary>
        /// <value>Mount the container&#39;s root filesystem as read only.</value>

        [DataMember(Name="ReadonlyRootfs")]
        public bool? ReadonlyRootfs { get; set; }

        /// <summary>
        /// A list of string values to customize labels for MLS systems, such as SELinux. 
        /// </summary>
        /// <value>A list of string values to customize labels for MLS systems, such as SELinux. </value>

        [DataMember(Name="SecurityOpt")]
        public List<string> SecurityOpt { get; set; }

        /// <summary>
        /// Storage driver options for this container, in the form &#x60;{\&quot;size\&quot;: \&quot;120G\&quot;}&#x60;. 
        /// </summary>
        /// <value>Storage driver options for this container, in the form &#x60;{\&quot;size\&quot;: \&quot;120G\&quot;}&#x60;. </value>

        [DataMember(Name="StorageOpt")]
        public Dictionary<string, string> StorageOpt { get; set; }

        /// <summary>
        /// A map of container directories which should be replaced by tmpfs mounts, and their corresponding mount options. For example:  &#x60;&#x60;&#x60; { \&quot;/run\&quot;: \&quot;rw,noexec,nosuid,size&#x3D;65536k\&quot; } &#x60;&#x60;&#x60; 
        /// </summary>
        /// <value>A map of container directories which should be replaced by tmpfs mounts, and their corresponding mount options. For example:  &#x60;&#x60;&#x60; { \&quot;/run\&quot;: \&quot;rw,noexec,nosuid,size&#x3D;65536k\&quot; } &#x60;&#x60;&#x60; </value>

        [DataMember(Name="Tmpfs")]
        public Dictionary<string, string> Tmpfs { get; set; }

        /// <summary>
        /// UTS namespace to use for the container.
        /// </summary>
        /// <value>UTS namespace to use for the container.</value>

        [DataMember(Name="UTSMode")]
        public string UTSMode { get; set; }

        /// <summary>
        /// Sets the usernamespace mode for the container when usernamespace remapping option is enabled. 
        /// </summary>
        /// <value>Sets the usernamespace mode for the container when usernamespace remapping option is enabled. </value>

        [DataMember(Name="UsernsMode")]
        public string UsernsMode { get; set; }

        /// <summary>
        /// Size of &#x60;/dev/shm&#x60; in bytes. If omitted, the system uses 64MB. 
        /// </summary>
        /// <value>Size of &#x60;/dev/shm&#x60; in bytes. If omitted, the system uses 64MB. </value>

        [DataMember(Name="ShmSize")]
        public long? ShmSize { get; set; }

        /// <summary>
        /// A list of kernel parameters (sysctls) to set in the container. For example:  &#x60;&#x60;&#x60; {\&quot;net.ipv4.ip_forward\&quot;: \&quot;1\&quot;} &#x60;&#x60;&#x60; 
        /// </summary>
        /// <value>A list of kernel parameters (sysctls) to set in the container. For example:  &#x60;&#x60;&#x60; {\&quot;net.ipv4.ip_forward\&quot;: \&quot;1\&quot;} &#x60;&#x60;&#x60; </value>

        [DataMember(Name="Sysctls")]
        public Dictionary<string, string> Sysctls { get; set; }

        /// <summary>
        /// Runtime to use with this container.
        /// </summary>
        /// <value>Runtime to use with this container.</value>

        [DataMember(Name="Runtime")]
        public string Runtime { get; set; }

        /// <summary>
        /// Isolation technology of the container. (Windows only) 
        /// </summary>
        /// <value>Isolation technology of the container. (Windows only) </value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum IsolationEnum
        {
            
            /// <summary>
            /// Enum DefaultEnum for default
            /// </summary>
            [EnumMember(Value = "default")]
            DefaultEnum = 1,
            
            /// <summary>
            /// Enum ProcessEnum for process
            /// </summary>
            [EnumMember(Value = "process")]
            ProcessEnum = 2,
            
            /// <summary>
            /// Enum HypervEnum for hyperv
            /// </summary>
            [EnumMember(Value = "hyperv")]
            HypervEnum = 3
        }

        /// <summary>
        /// Isolation technology of the container. (Windows only) 
        /// </summary>
        /// <value>Isolation technology of the container. (Windows only) </value>

        [DataMember(Name="Isolation")]
        public IsolationEnum? Isolation { get; set; }

        /// <summary>
        /// The list of paths to be masked inside the container (this overrides the default set of paths). 
        /// </summary>
        /// <value>The list of paths to be masked inside the container (this overrides the default set of paths). </value>

        [DataMember(Name="MaskedPaths")]
        public List<string> MaskedPaths { get; set; }

        /// <summary>
        /// The list of paths to be set as read-only inside the container (this overrides the default set of paths). 
        /// </summary>
        /// <value>The list of paths to be set as read-only inside the container (this overrides the default set of paths). </value>

        [DataMember(Name="ReadonlyPaths")]
        public List<string> ReadonlyPaths { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HostConfig {\n");
            sb.Append("  Binds: ").Append(Binds).Append("\n");
            sb.Append("  ContainerIDFile: ").Append(ContainerIDFile).Append("\n");
            sb.Append("  LogConfig: ").Append(LogConfig).Append("\n");
            sb.Append("  NetworkMode: ").Append(NetworkMode).Append("\n");
            sb.Append("  PortBindings: ").Append(PortBindings).Append("\n");
            sb.Append("  RestartPolicy: ").Append(RestartPolicy).Append("\n");
            sb.Append("  AutoRemove: ").Append(AutoRemove).Append("\n");
            sb.Append("  VolumeDriver: ").Append(VolumeDriver).Append("\n");
            sb.Append("  VolumesFrom: ").Append(VolumesFrom).Append("\n");
            sb.Append("  Mounts: ").Append(Mounts).Append("\n");
            sb.Append("  ConsoleSize: ").Append(ConsoleSize).Append("\n");
            sb.Append("  CapAdd: ").Append(CapAdd).Append("\n");
            sb.Append("  CapDrop: ").Append(CapDrop).Append("\n");
            sb.Append("  CgroupnsMode: ").Append(CgroupnsMode).Append("\n");
            sb.Append("  Dns: ").Append(Dns).Append("\n");
            sb.Append("  DnsOptions: ").Append(DnsOptions).Append("\n");
            sb.Append("  DnsSearch: ").Append(DnsSearch).Append("\n");
            sb.Append("  ExtraHosts: ").Append(ExtraHosts).Append("\n");
            sb.Append("  GroupAdd: ").Append(GroupAdd).Append("\n");
            sb.Append("  IpcMode: ").Append(IpcMode).Append("\n");
            sb.Append("  Cgroup: ").Append(Cgroup).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  OomScoreAdj: ").Append(OomScoreAdj).Append("\n");
            sb.Append("  PidMode: ").Append(PidMode).Append("\n");
            sb.Append("  Privileged: ").Append(Privileged).Append("\n");
            sb.Append("  PublishAllPorts: ").Append(PublishAllPorts).Append("\n");
            sb.Append("  ReadonlyRootfs: ").Append(ReadonlyRootfs).Append("\n");
            sb.Append("  SecurityOpt: ").Append(SecurityOpt).Append("\n");
            sb.Append("  StorageOpt: ").Append(StorageOpt).Append("\n");
            sb.Append("  Tmpfs: ").Append(Tmpfs).Append("\n");
            sb.Append("  UTSMode: ").Append(UTSMode).Append("\n");
            sb.Append("  UsernsMode: ").Append(UsernsMode).Append("\n");
            sb.Append("  ShmSize: ").Append(ShmSize).Append("\n");
            sb.Append("  Sysctls: ").Append(Sysctls).Append("\n");
            sb.Append("  Runtime: ").Append(Runtime).Append("\n");
            sb.Append("  Isolation: ").Append(Isolation).Append("\n");
            sb.Append("  MaskedPaths: ").Append(MaskedPaths).Append("\n");
            sb.Append("  ReadonlyPaths: ").Append(ReadonlyPaths).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((HostConfig)obj);
        }

        /// <summary>
        /// Returns true if HostConfig instances are equal
        /// </summary>
        /// <param name="other">Instance of HostConfig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HostConfig other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Binds == other.Binds ||
                    Binds != null &&
                    Binds.SequenceEqual(other.Binds)
                ) && 
                (
                    ContainerIDFile == other.ContainerIDFile ||
                    ContainerIDFile != null &&
                    ContainerIDFile.Equals(other.ContainerIDFile)
                ) && 
                (
                    LogConfig == other.LogConfig ||
                    LogConfig != null &&
                    LogConfig.Equals(other.LogConfig)
                ) && 
                (
                    NetworkMode == other.NetworkMode ||
                    NetworkMode != null &&
                    NetworkMode.Equals(other.NetworkMode)
                ) && 
                (
                    PortBindings == other.PortBindings ||
                    PortBindings != null &&
                    PortBindings.Equals(other.PortBindings)
                ) && 
                (
                    RestartPolicy == other.RestartPolicy ||
                    RestartPolicy != null &&
                    RestartPolicy.Equals(other.RestartPolicy)
                ) && 
                (
                    AutoRemove == other.AutoRemove ||
                    AutoRemove != null &&
                    AutoRemove.Equals(other.AutoRemove)
                ) && 
                (
                    VolumeDriver == other.VolumeDriver ||
                    VolumeDriver != null &&
                    VolumeDriver.Equals(other.VolumeDriver)
                ) && 
                (
                    VolumesFrom == other.VolumesFrom ||
                    VolumesFrom != null &&
                    VolumesFrom.SequenceEqual(other.VolumesFrom)
                ) && 
                (
                    Mounts == other.Mounts ||
                    Mounts != null &&
                    Mounts.SequenceEqual(other.Mounts)
                ) && 
                (
                    ConsoleSize == other.ConsoleSize ||
                    ConsoleSize != null &&
                    ConsoleSize.SequenceEqual(other.ConsoleSize)
                ) && 
                (
                    CapAdd == other.CapAdd ||
                    CapAdd != null &&
                    CapAdd.SequenceEqual(other.CapAdd)
                ) && 
                (
                    CapDrop == other.CapDrop ||
                    CapDrop != null &&
                    CapDrop.SequenceEqual(other.CapDrop)
                ) && 
                (
                    CgroupnsMode == other.CgroupnsMode ||
                    CgroupnsMode != null &&
                    CgroupnsMode.Equals(other.CgroupnsMode)
                ) && 
                (
                    Dns == other.Dns ||
                    Dns != null &&
                    Dns.SequenceEqual(other.Dns)
                ) && 
                (
                    DnsOptions == other.DnsOptions ||
                    DnsOptions != null &&
                    DnsOptions.SequenceEqual(other.DnsOptions)
                ) && 
                (
                    DnsSearch == other.DnsSearch ||
                    DnsSearch != null &&
                    DnsSearch.SequenceEqual(other.DnsSearch)
                ) && 
                (
                    ExtraHosts == other.ExtraHosts ||
                    ExtraHosts != null &&
                    ExtraHosts.SequenceEqual(other.ExtraHosts)
                ) && 
                (
                    GroupAdd == other.GroupAdd ||
                    GroupAdd != null &&
                    GroupAdd.SequenceEqual(other.GroupAdd)
                ) && 
                (
                    IpcMode == other.IpcMode ||
                    IpcMode != null &&
                    IpcMode.Equals(other.IpcMode)
                ) && 
                (
                    Cgroup == other.Cgroup ||
                    Cgroup != null &&
                    Cgroup.Equals(other.Cgroup)
                ) && 
                (
                    Links == other.Links ||
                    Links != null &&
                    Links.SequenceEqual(other.Links)
                ) && 
                (
                    OomScoreAdj == other.OomScoreAdj ||
                    OomScoreAdj != null &&
                    OomScoreAdj.Equals(other.OomScoreAdj)
                ) && 
                (
                    PidMode == other.PidMode ||
                    PidMode != null &&
                    PidMode.Equals(other.PidMode)
                ) && 
                (
                    Privileged == other.Privileged ||
                    Privileged != null &&
                    Privileged.Equals(other.Privileged)
                ) && 
                (
                    PublishAllPorts == other.PublishAllPorts ||
                    PublishAllPorts != null &&
                    PublishAllPorts.Equals(other.PublishAllPorts)
                ) && 
                (
                    ReadonlyRootfs == other.ReadonlyRootfs ||
                    ReadonlyRootfs != null &&
                    ReadonlyRootfs.Equals(other.ReadonlyRootfs)
                ) && 
                (
                    SecurityOpt == other.SecurityOpt ||
                    SecurityOpt != null &&
                    SecurityOpt.SequenceEqual(other.SecurityOpt)
                ) && 
                (
                    StorageOpt == other.StorageOpt ||
                    StorageOpt != null &&
                    StorageOpt.SequenceEqual(other.StorageOpt)
                ) && 
                (
                    Tmpfs == other.Tmpfs ||
                    Tmpfs != null &&
                    Tmpfs.SequenceEqual(other.Tmpfs)
                ) && 
                (
                    UTSMode == other.UTSMode ||
                    UTSMode != null &&
                    UTSMode.Equals(other.UTSMode)
                ) && 
                (
                    UsernsMode == other.UsernsMode ||
                    UsernsMode != null &&
                    UsernsMode.Equals(other.UsernsMode)
                ) && 
                (
                    ShmSize == other.ShmSize ||
                    ShmSize != null &&
                    ShmSize.Equals(other.ShmSize)
                ) && 
                (
                    Sysctls == other.Sysctls ||
                    Sysctls != null &&
                    Sysctls.SequenceEqual(other.Sysctls)
                ) && 
                (
                    Runtime == other.Runtime ||
                    Runtime != null &&
                    Runtime.Equals(other.Runtime)
                ) && 
                (
                    Isolation == other.Isolation ||
                    Isolation != null &&
                    Isolation.Equals(other.Isolation)
                ) && 
                (
                    MaskedPaths == other.MaskedPaths ||
                    MaskedPaths != null &&
                    MaskedPaths.SequenceEqual(other.MaskedPaths)
                ) && 
                (
                    ReadonlyPaths == other.ReadonlyPaths ||
                    ReadonlyPaths != null &&
                    ReadonlyPaths.SequenceEqual(other.ReadonlyPaths)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Binds != null)
                    hashCode = hashCode * 59 + Binds.GetHashCode();
                    if (ContainerIDFile != null)
                    hashCode = hashCode * 59 + ContainerIDFile.GetHashCode();
                    if (LogConfig != null)
                    hashCode = hashCode * 59 + LogConfig.GetHashCode();
                    if (NetworkMode != null)
                    hashCode = hashCode * 59 + NetworkMode.GetHashCode();
                    if (PortBindings != null)
                    hashCode = hashCode * 59 + PortBindings.GetHashCode();
                    if (RestartPolicy != null)
                    hashCode = hashCode * 59 + RestartPolicy.GetHashCode();
                    if (AutoRemove != null)
                    hashCode = hashCode * 59 + AutoRemove.GetHashCode();
                    if (VolumeDriver != null)
                    hashCode = hashCode * 59 + VolumeDriver.GetHashCode();
                    if (VolumesFrom != null)
                    hashCode = hashCode * 59 + VolumesFrom.GetHashCode();
                    if (Mounts != null)
                    hashCode = hashCode * 59 + Mounts.GetHashCode();
                    if (ConsoleSize != null)
                    hashCode = hashCode * 59 + ConsoleSize.GetHashCode();
                    if (CapAdd != null)
                    hashCode = hashCode * 59 + CapAdd.GetHashCode();
                    if (CapDrop != null)
                    hashCode = hashCode * 59 + CapDrop.GetHashCode();
                    if (CgroupnsMode != null)
                    hashCode = hashCode * 59 + CgroupnsMode.GetHashCode();
                    if (Dns != null)
                    hashCode = hashCode * 59 + Dns.GetHashCode();
                    if (DnsOptions != null)
                    hashCode = hashCode * 59 + DnsOptions.GetHashCode();
                    if (DnsSearch != null)
                    hashCode = hashCode * 59 + DnsSearch.GetHashCode();
                    if (ExtraHosts != null)
                    hashCode = hashCode * 59 + ExtraHosts.GetHashCode();
                    if (GroupAdd != null)
                    hashCode = hashCode * 59 + GroupAdd.GetHashCode();
                    if (IpcMode != null)
                    hashCode = hashCode * 59 + IpcMode.GetHashCode();
                    if (Cgroup != null)
                    hashCode = hashCode * 59 + Cgroup.GetHashCode();
                    if (Links != null)
                    hashCode = hashCode * 59 + Links.GetHashCode();
                    if (OomScoreAdj != null)
                    hashCode = hashCode * 59 + OomScoreAdj.GetHashCode();
                    if (PidMode != null)
                    hashCode = hashCode * 59 + PidMode.GetHashCode();
                    if (Privileged != null)
                    hashCode = hashCode * 59 + Privileged.GetHashCode();
                    if (PublishAllPorts != null)
                    hashCode = hashCode * 59 + PublishAllPorts.GetHashCode();
                    if (ReadonlyRootfs != null)
                    hashCode = hashCode * 59 + ReadonlyRootfs.GetHashCode();
                    if (SecurityOpt != null)
                    hashCode = hashCode * 59 + SecurityOpt.GetHashCode();
                    if (StorageOpt != null)
                    hashCode = hashCode * 59 + StorageOpt.GetHashCode();
                    if (Tmpfs != null)
                    hashCode = hashCode * 59 + Tmpfs.GetHashCode();
                    if (UTSMode != null)
                    hashCode = hashCode * 59 + UTSMode.GetHashCode();
                    if (UsernsMode != null)
                    hashCode = hashCode * 59 + UsernsMode.GetHashCode();
                    if (ShmSize != null)
                    hashCode = hashCode * 59 + ShmSize.GetHashCode();
                    if (Sysctls != null)
                    hashCode = hashCode * 59 + Sysctls.GetHashCode();
                    if (Runtime != null)
                    hashCode = hashCode * 59 + Runtime.GetHashCode();
                    if (Isolation != null)
                    hashCode = hashCode * 59 + Isolation.GetHashCode();
                    if (MaskedPaths != null)
                    hashCode = hashCode * 59 + MaskedPaths.GetHashCode();
                    if (ReadonlyPaths != null)
                    hashCode = hashCode * 59 + ReadonlyPaths.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(HostConfig left, HostConfig right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(HostConfig left, HostConfig right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
